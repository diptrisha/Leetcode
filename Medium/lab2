#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stdlib.h>
#include <sstream>
#include <iomanip>
#include <cstring>
#include <stack>
#include <deque>
#include <algorithm>
#include <getopt.h>

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
using namespace std;
int verbosemode=0;
int scale; 
int ofs=0;
int quantum= 10000;
int maxPrio = 4;
vector<int> randVals;
enum State {CREATED, READY, RUNNING, BLOCKED, DONE};
enum TransitionState {TRANS_TO_READY, TRANS_TO_RUN, TRANS_TO_BLOCK, TRANS_TO_DONE, TRANS_TO_PREEMPT};
int myrandom(int burst) { 
    if(ofs == scale)
    {
        ofs=0;
    }
    return 1 + (randVals[ofs++] % burst); 

    }
class Process
{
    public:
        int arrTime=0, tot_cpuTime=0, cpu_burst=0, io_burst=0;
        int pID =0;
        int staticPrio;
        int dynamicPrio;
        State current_state = CREATED;
        // Process(int at, int ct, int cb, int ib)
        // {
        //     arrTime = at;
        //     tot_cpuTime = ct;
        //     cb = cpu_burst;
        //     ib = io_burst;
        // }
         void printprocc()
  {
      cout<<"PID->"<<pID<<" "
          <<"AT->"<<arrTime<<" "
          <<"TC->"<<tot_cpuTime<<" "
          <<"CB->"<<cpu_burst<<" "
          <<"IO->"<<io_burst<<endl;



  }

};
Process* ptr;
vector <Process*> processes;
vector <Process*> :: const_iterator processIt;
class Scheduler
{
public:
    int quantum = 10000; // set a large defualt quantum
	virtual void add_process(Process*) = 0;
	virtual Process* get_next_process() = 0;
	virtual void test_preempt(Process*, int)=0;
};
Scheduler* s;
class FCFS: public Scheduler{
    deque<Process*> runQ;
    public:
        void add_process(Process *proc) {
        runQ.push_back(proc);
    }
    Process* get_next_process() {
        Process * temp = runQ.front();
        runQ.pop_front();
        return temp;
    }
};
class LCFS: public Scheduler{
    deque<Process*> runQ;
    public:
        void add_process(Process *proc) {
        runQ.push_back(proc);
    }
    Process* get_next_process() {
        Process * temp = runQ.back();
        runQ.pop_back();
        return temp;
    }
};

class Event
{
    public:
        int eventId;
        int eventTimestamp;
        Process* event_proc;
        TransitionState trans_state;
        State eventState;
        Event(int timestamp, Process *proc, TransitionState tran, int eventID)
        {
            eventId = eventID;
            eventTimestamp = timestamp;
            event_proc = proc;
            trans_state = tran;
        }

};
Event* evt;
deque<Event*> eventQ;
class DES
{
    public:
       
        Event* get_event() 
        {
            Event* nwE = eventQ.front();
            if(eventQ.empty())
            {
                return nullptr;
            }
            
            eventQ.pop_front();
            return nwE;
        }
        void add_event(Event* event)
        {
            deque <Event*> :: iterator eventIt;
            //eventQ.push_back(event);
            //int qsize = eventQ.size();
            for (eventIt=eventQ.begin();eventIt!=eventQ.end();eventIt++)
            {
                if(event->eventTimestamp<(*eventIt)->eventTimestamp)
                {
                     
                    break;
                }
            }
            eventQ.insert(eventIt,event);
        }
        void remove_event()
        {
            eventQ.pop_front();
        }

};

void readfile()
{
    int proc_id ;
    int AT,TC,CB,IB=0;
    ifstream input;
    input.open("C:/Users/TRISHA/Documents/C++/input1");
    string line;
    while (getline(input, line)){
        istringstream tokens(line);
        tokens >> AT >> TC >> CB >> IB;
        cout<<AT<<endl;
        cout<<TC<<endl;
        cout<<CB<<endl;
        cout<<IB<<endl;
        ptr = new Process();
        ptr->arrTime = AT;
        cout<<"ptr arr time "<<ptr->arrTime<<endl;
        ptr->tot_cpuTime = TC;
        ptr->cpu_burst = CB;
        ptr->io_burst = IB;
        ptr->pID = proc_id;
        proc_id++;
        ptr->staticPrio = myrandom(maxPrio);
        ptr->dynamicPrio = ptr->staticPrio-1;
        //evt = new Event();
        processes.push_back(ptr);
       
        
    }
    input.close();
    DES* desLayer = new DES();
    Event *evt;
    for (int i = 0; i<processes.size(); ++i){
        
        evt = new Event(processes[i]->arrTime, processes[i], TRANS_TO_READY, processes[i]->pID);
        desLayer->add_event(evt);
    }

}
void readRandomFile(string randfile)
{
    int number;
    string line;
    ifstream input;
    input.open(randfile.c_str());
    getline(input, line);
    istringstream tokens(line);
    tokens >> scale;
    while(getline(input, line)){
        istringstream tokens(line);
        tokens >> number;
        randVals.push_back(number);
    }
    input.close();
}


void simulation(DES* des)
{
    Event* event;
    bool CALL_SCHEDULER;
    Scheduler* sched;
    while(event = des->get_event())
    {

        Process* process = event->event_proc;
        
        Event *new_event;
        switch (event->trans_state)
        {
        case TRANS_TO_READY:
                if (process->current_state == BLOCKED) {
                    //do something
                }
                sched->add_process(process);
                process->current_state = READY;
                CALL_SCHEDULER = true;
            break;
        
        case TRANS_TO_RUN:
            break;

        case TRANS_TO_BLOCK:
            //new_event = new Event();
            des->add_event(new_event);
            CALL_SCHEDULER = true;
            break;
        case TRANS_TO_DONE:
            CALL_SCHEDULER = true;
            break;
        case TRANS_TO_PREEMPT:
            CALL_SCHEDULER = true;
            break;
        default:
            break;
        }
    }
}
int main(int argc, char* argv[])
{
   //string filename =  string(argv[argc-2]);
   //string filename = "inp"
    //string randfile =  string(argv[argc-1]); 
    int c = 0;
    int pid =0;
    string schedulingInput;
    
    while((c = getopt (argc, argv, "vtes")) != -1)
    {
        cout<<"check1"<<endl;
        switch (c)
          {
            case 'v':
                verbosemode = 1;
                break;
            case 'e':
                break;
            case 't':
                break;
          case 's':
            cout<<"sched inp check  "<<endl;
            schedulingInput = string(optarg);
            //cout<<optarg<<endl;
            cout<<"sched inp check  "<<schedulingInput<<endl;
            break;
            default:
            break;
          }

    }
    cout<<verbosemode<<"ggg"<<endl;
    if(schedulingInput[0] == 'F'){
        cout<<"fcfs"<<endl;
    }
   // readfile();
    //readRandomFile(randfile);
    // DES* des = new DES();
    // simulation(des);

    // for(processIt=processes.begin(); processIt!= processes.end();processIt++)
    // {
    //     //processes[i]->printprocc();
    //     Process* p = *processIt;
    //     cout<<"arr time:"<<p->arrTime<<endl;
    //     cout<<"cpu time:"<<p->tot_cpuTime<<endl;
    //     cout<<"cpu burst:"<<p->cpu_burst<<endl;
    //     cout<<"io  burst:"<<p->io_burst<<endl;
    //     cout<<"process id:"<<p->pID<<endl;
    // }

    
    // cout<<"--EVENT QUEUE--"<<endl;
    // cout<<"process size is -> "<< processes.size()<<endl;
    // cout<<"event que size is ->"<< eventQ.size()<<endl;
    // for (auto it = eventQ.begin(); it != eventQ.end(); ++it)
    // {
    //     Event* e = *it;
    //     cout<<"event id:"<<e->eventId<<endl;
    //     cout<<"event timestamp:"<<e->eventTimestamp<<endl;
    //     //cout<<"event state:"<<e->eventState<<endl;
        
    // }
}
