#include<iostream>
#include<stdio.h>
#include<fstream>
#include<vector>
#include<iomanip>
#include<sstream> 
#include<string>
#include <algorithm>
#include<string.h>

using namespace std;
string filename;
FILE *infile;
ifstream f;
int line_no =0;
int line_offset=0;
string getLineFromFile;
char* token = NULL;
int instructionCount = 0;
int tot_inst_count=0;
int eof = 0;
vector<vector<string>> uselistv;
vector<int>mod_offset;
class Symbol{

    public:
        int base_address;
        int relative_address;
        string symbol_name;
        int module_number;
        bool isSymUsed = false;
        bool isSymDefined = false;
        bool isMultipleTimesDef = false;

        Symbol(string symbolName)
        {
            symbol_name = symbolName;
        }
        std:: string getSymbolName ()
        {
            return symbol_name;
        }
        int getRelativeAddr()
        {
            return relative_address;
        }
        
        std::ostream & out( std::ostream &os ) const
        {
        return ( os << "symbol_name = " << symbol_name << ", relative_address  = " << base_address );
        }
        
};
vector<Symbol>symbollist;
vector<Symbol>uselistSymbols;
vector<Symbol>::iterator it;
class Module{
    public:
        int mod_number;
        int mod_length;
        int baseaddress;
       // vector<
       
};
void __parseerror(int errcode) 
{
	string errstr[] = {
		"NUM_EXPECTED",
		"SYM_EXPECTED",
		"ADDR_EXPECTED",
		"SYM_TOO_LONG",
		"TOO_MANY_DEF_IN_MODULE",
		"TOO_MANY_USE_IN_MODULE",
		"TOO_MANY_INSTR",
	};
    cout<<"Parse Error line "<<line_no<<" offset "<<line_offset<<": "<<errstr[errcode]<<endl; 
	exit(0);
}
string getNextToken()
{
    char delimeter[] = " \t\n";
    
    /*while(getLineFromFile.empty()){
         getline(f, getLineFromFile);
         cout<<"yes yes yes "<<endl;
    }*/
    if(!f.eof())
    {
        //cout<<"getTok"<<endl;
    
        if(token == NULL){
            //Store Line temp
            getline(f, getLineFromFile);
            int len = getLineFromFile.size();
            char* str = new char[len+1];
            strcpy(str, getLineFromFile.c_str());
            token = strtok(str, delimeter);
           // cout<<"Inside token is null"<<endl;
        } else {
            //line = "";
            token = strtok(NULL, delimeter);
             line_offset = token - getLineFromFile.c_str();
            //cout<<"Not in token is null"<<endl;
        }
       while(token == NULL){ 
               // cout << "Token:" << token << "\n";
              // cout<<"token is null  "<<endl;
                getline(f, getLineFromFile);
                line_no++;
                while(getLineFromFile.empty() && !f.eof()){
                    getline(f, getLineFromFile);
                    line_no++;
                }
                if(getLineFromFile.empty() && f.eof()){
                    //cout<<"Setting eof to -1"<<endl;
                    eof = 1;
                    string st = "eof";
                    int len = st.size();
                char* str = new char[len+1];
                strcpy(str, st.c_str());
                    token = str;
                    
                    break;
                }
                int len = getLineFromFile.size();
                char* str = new char[len+1];
                strcpy(str, getLineFromFile.c_str());
                token = strtok(str, delimeter);
            }
    } else {
        string t = "eof";
        int len = t.size();
        char* t2 = new char[len+1];
        token = t2;
    }
    //cout<<"reaching here"<<endl;
    return token;
}

bool is_number(const std::string& s)
{
    std::string::const_iterator it = s.begin();
    while (it != s.end() && std::isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}
int readInt()
{
    
    string tok;
    //cout<<"Trying to get int "<<endl;
    tok = getNextToken();
    //cout<<"after this "<<endl;
    if(eof == 1){
        //cout<<"yes eof is 1"<<endl;
        return -1;
    }
    //cout<<"tok: "<<tok<<endl;
    if(is_number(tok))
    {
        return stoi(tok);
    }
    return 0;
}

string readSymbol()
{
 
    string token = getNextToken();
   
    
    return token;
}

char readIAER()
{
    string token = getNextToken();
    const char* c = token.c_str();
    if(c[0]!='I' && c[0]!='R' && c[0]!='E' && c[0]!='A')
    {
        //parseerror(2);
    }
    return c[0];
}
void createSymbol(Symbol sym, int value , int tot_in)
{
    //isDefined = true;
    sym.relative_address = value;
    sym.base_address = value + tot_in;
    sym.isSymDefined = true;
    symbollist.push_back(sym);

}
void passOne()
{
    //cout<<"hello pass1"<<endl;
    
    int mod_num = 1;
 
    while(!f.eof())
    {
        //cout<<"Starting new module "<<endl;
        int defCount = readInt();
        if(defCount == -1){
            //cout<<"yes defcout is -1"<<endl;
            break;
    }
    //cout<<"defCount: "<<defCount<<endl;
   
    //module.mod_number++;
    //compute mod base addr if checks if mod present or not 
    for(int i = 0;i<defCount;i++)
    {
        Symbol sym("");
        sym.symbol_name = readSymbol();
        //cout<<"sym name: "<< sym.symbol_name<<endl;
        int value = readInt();
        sym.module_number = mod_num;
        //if sym is already defined then dont call createSym , isdefined = 1 else createSym
        if(!sym.isSymDefined)
        {
            createSymbol(sym, value, tot_inst_count);
        }
        
    }

    int useCount = readInt();
    //cout<<"usecount: "<<useCount<<endl;
    for(int i=0;i<useCount;i++)
    {
        Symbol sym("");
        sym.symbol_name = readSymbol();
        //store in use lis vec
    }

    int instr;
    instructionCount = readInt();
    // cout<<"instructionCount"<<instructionCount<<endl;
    tot_inst_count += instructionCount;
    //cout<<"tot no of instruction cout: "<<tot_inst_count;
    instr = instructionCount;
    
    for(int i=0;i<instructionCount;i++)
    {
        char addressmode = readIAER();
        int instruction = readInt();

    }
    mod_num++;
    // if(instructionCount==0){
    //     //
    //     mod_num++;
    //     //mod_ffset[mod_num-1] = tot_instrc_count;
    // }
   //cout<<"Module over"<<endl;
   
    }
    //cout<<"After eof"<<endl;

    
}

void printSymbolTable()
{
    cout<<"---Symbol Table---"<<endl;
    for(const Symbol &s: symbollist)
    {
        s.out( std::cout ) << std::endl;
    }
}
 
void passTwo()
{
    //cout<<"hello from pass2"<<endl;

    int mod_num = 1;
    int memVar = 0;
    cout<<"Memory Map "<<endl;
    while(!f.eof())
    {
        //cout<<"Starting new module "<<endl;
        int defCount = readInt();
        if(defCount == -1){
            //cout<<"yes defcout is -1"<<endl;
            break;
        }
        //cout<<"defCount: "<<defCount<<endl;
   
        //module.mod_number++;
        //compute mod base addr if checks if mod present or not 
        for(int i = 0;i<defCount;i++)
        {
            Symbol sym("");
            sym.symbol_name = readSymbol();
            //cout<<"sym name: "<< sym.symbol_name<<endl;
            int value = readInt();
            sym.module_number = mod_num;
        }

        int useCount = readInt();
        //cout<<"usecount: "<<useCount<<endl;
        for(int i=0;i<useCount;i++)
        {
            Symbol sym("");
            sym.symbol_name = readSymbol();
            string str = sym.symbol_name;
            auto it = find_if(symbollist.begin(), symbollist.end(), [&str]( Symbol& s) {return s.getSymbolName() == str;});
            if (it != symbollist.end())
            {
                sym.isSymUsed = true;
            }
            uselistSymbols.push_back(sym);
            
            //store in use lis vec
        }
        
        int instrC;
        instructionCount = readInt();
        //cout<<"instructionCount"<<instructionCount<<endl;
        //tot_inst_count += instructionCount;
        //cout<<"tot no of instruction cout: "<<tot_inst_count;
        instrC = instructionCount;
        int finalAddress;
        while(instructionCount-- > 0)
        {
            char addressmode = readIAER();
            int instruction = readInt();

            int opcode = instruction/1000;
            int operand = instruction % 1000;
            finalAddress = 0;
            string errormessage = "";
            Symbol s1("");
            int index;
            string str;
            int rel_add;
            Symbol sym("");
            Symbol S("");
            
            switch (addressmode)
            {
            case 'A':
                    if(operand<512)
                    {
                        finalAddress = instruction;
                    }
                    else
                    {
                        errormessage = "Error: Absolute address exceeds machine size; zero used";
                        finalAddress = opcode*1000;
                        //errorS = true;
                        //cout<<"inst:A "<<addressmode<<"val :"<<instruction<<endl;
                    }
                    break;
            case 'R':
                    opcode = instruction/1000;
                    operand = instruction%1000;
                    if(operand<instructionCount)
                    {
                        finalAddress = tot_inst_count + instruction;
                    }
                    else
                    {
                        finalAddress = tot_inst_count + instruction;
                        errormessage = "Error: Relative address exceeds module size; zero used";
                    }
                    // instruction = instruction + tot_inst_count;
                    // if(instruction % 1000 >= tot_inst_count + instrC)
                    // {
                    //      errormessage = "Error: Relative address exceeds module size; zero used";
                    //      instruction = opcode * 1000 + tot_inst_count;
                    // }
                    // finalAddress = instruction;
                    //cout<<"inst: R "<<addressmode<<"val :"<<instruction<<endl;
                    break;
            case 'E':
                    index = operand;
                    s1 = uselistSymbols.at(index);
                    str = s1.getSymbolName();
                    //cout<<"str here :"<<str<<endl;
                    // it = find_if(symbollist.begin(), symbollist.end(), [&str]( Symbol& s) {return s.getSymbolName() == str;});
                    // if (it != symbollist.end())
                    // {
                    //     rel_add =sym.getRelativeAddr();
                    // }

                    for(int u = 0;u<symbollist.size();u++)
                    {
                        S = symbollist[u];
                        if(S.symbol_name.compare(str)==0)
                        {
                            
                            //int opc = opcode;
                            rel_add = S.base_address;
                            //cout<<"rel addr :"<<rel_add<<endl;
                            finalAddress = (opcode*1000)+rel_add;
                            //notfound = false;
                            break;
                        } 


                    }
                    //finalAddress = (opcode*1000)+rel_add;
                    //cout<<"symbol name-->"<<s1.symbol_name<<endl;

                    break;

            //operand 
            //opcode
            //0,1,2
            case 'I':
                    if(instruction>9999)
                    {
                        instruction = 9999;
                        errormessage = "Error: Illegal immediate value; treated as 9999";
                        //errorS = true;
                    }
                    finalAddress = instruction;
                    //cout<<"inst: I"<<addressmode<<"val :"<<instruction<<endl;
                    break;
            default:
                break;
            }

            cout<<setfill('0')<<setw(3)<<memVar;
            memVar++;
            cout<<":"<<" "<<setfill('0')<<setw(4)<<finalAddress;
            cout<<endl;
        }
        tot_inst_count += instrC;
        // for(int i = 0;i<instrC;i++)
        // {
        //     cout<<setfill('0')<<setw(3)<<memVar;
        //     memVar++;
        //     cout<<":"<<" "<<setfill('0')<<setw(4)<<finalAddress;
        // }
        mod_num++;
        uselistSymbols.clear();
        //cout<<"Module over"<<endl; 
    }
    //cout<<"After eof"<<endl;
}

void printMemoryMap()
{

}

int main(int argc, char *argv[]){
    
   if(argc!=2)
    {
        cout<<" Wrong Inputs \n";
        exit(0);
    }

    //infile = fopen(argv[1],"r");
    filename = argv[1];
    f.open(filename);
    passOne();
    // call print sym table
    printSymbolTable();
    f.close();
    token = NULL;
    eof = 0;
    tot_inst_count=0;
    f.open(filename);
    passTwo();
    printMemoryMap();
    f.close();

    return 0;
}
